#!/usr/bin/env node

/**
 * Git Credential Helper for GitHub OAuth Tokens
 * 
 * This script provides fresh OAuth tokens to Git operations by:
 * 1. Reading credential requests from Git via stdin
 * 2. Fetching current OAuth token from the application database
 * 3. Returning the token as credentials to Git via stdout
 * 
 * Usage: Git calls this automatically when configured as a credential helper
 */

const path = require('path');
const fs = require('fs');

// Set up the application environment and paths
const appRoot = path.join(__dirname, '..');
process.chdir(appRoot);

// Load environment configuration
require('dotenv').config({ path: path.join(appRoot, '.env') });

// Suppress Prisma logging for credential helper
process.env.PRISMA_LOG_LEVEL = 'error';

// Add the src directory to the module path so we can require our services
const srcPath = path.join(appRoot, 'src');
process.env.NODE_PATH = srcPath + ':' + (process.env.NODE_PATH || '');
require('module').Module._initPaths();

async function main() {
  try {
    const command = process.argv[2];
    
    if (command !== 'get') {
      // We only handle 'get' command for providing credentials
      // 'store' and 'erase' are not needed for OAuth tokens
      process.exit(0);
    }

    // Read input from Git via stdin
    const input = await readStdin();
    const credentials = parseCredentialInput(input);
    
    // Only provide credentials for GitHub
    if (!credentials.host || !credentials.host.includes('github.com')) {
      process.exit(0);
    }

    // Get OAuth token from application database
    const token = await getGitHubToken();
    
    if (!token) {
      // No token available - let Git handle authentication
      process.exit(0);
    }

    // Output credentials to Git
    console.log(`username=token`);
    console.log(`password=${token}`);
    console.log(''); // Empty line to end the credential block
    
  } catch (error) {
    // Log error and output to stderr for debugging
    const errorMessage = `Git credential helper error: ${error.message}\nStack: ${error.stack}\n`;
    
    // Try to log to file
    try {
      const logPath = path.join(__dirname, '..', 'logs', 'git-credential.log');
      fs.mkdirSync(path.dirname(logPath), { recursive: true });
      fs.appendFileSync(logPath, `${new Date().toISOString()} ${errorMessage}`);
    } catch (logError) {
      // If we can't log to file, output to stderr
      console.error(errorMessage);
    }
    
    process.exit(1);
  }
}

/**
 * Read all input from stdin
 * @returns {Promise<string>} Input from stdin
 */
function readStdin() {
  return new Promise((resolve, reject) => {
    let input = '';
    
    process.stdin.setEncoding('utf8');
    
    process.stdin.on('data', (chunk) => {
      input += chunk;
    });
    
    process.stdin.on('end', () => {
      resolve(input);
    });
    
    process.stdin.on('error', (error) => {
      reject(error);
    });
  });
}

/**
 * Parse Git credential input format
 * @param {string} input - Raw input from Git
 * @returns {Object} Parsed credentials object
 */
function parseCredentialInput(input) {
  const credentials = {};
  const lines = input.trim().split('\n');
  
  for (const line of lines) {
    const [key, value] = line.split('=');
    if (key && value) {
      credentials[key] = value;
    }
  }
  
  return credentials;
}

/**
 * Get GitHub OAuth token from application database
 * @returns {Promise<string|null>} OAuth token or null if not available
 */
async function getGitHubToken() {
  try {
    // Capture original stdout/stderr
    const originalStdout = process.stdout.write;
    const originalStderr = process.stderr.write;
    
    // Suppress all output during database operations
    process.stdout.write = () => {};
    process.stderr.write = () => {};
    
    // Import the settings service from the application (it's a singleton)
    const settingsService = require('../src/services/settings.service');
    
    // Get the current OAuth token
    const token = await settingsService.getGithubToken();
    
    // Restore original stdout/stderr
    process.stdout.write = originalStdout;
    process.stderr.write = originalStderr;
    
    return token;
    
  } catch (error) {
    // Restore original stdout/stderr in case of error
    process.stdout.write = process.stdout.write.bind(process.stdout);
    process.stderr.write = process.stderr.write.bind(process.stderr);
    return null;
  }
}

// Run the credential helper
main().catch((error) => {
  process.exit(0);
});